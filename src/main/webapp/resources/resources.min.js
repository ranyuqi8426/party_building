Ext.define("Ext.ux.TreePicker", {
	extend : "Ext.form.field.Picker",
	xtype : "treepicker",
	uses : [ "Ext.tree.Panel" ],
	triggerCls : Ext.baseCSSPrefix + "form-arrow-trigger",
	config : {
		store : null,
		displayField : null,
		columns : null,
		selectOnTab : true,
		maxPickerHeight : 300,
		minPickerHeight : 150
	},
	editable : false,
	initComponent : function() {
		var me = this;
		me.callParent(arguments);
		me.mon(me.store, {
			scope : me,
			load : me.onLoad,
			update : me.onUpdate
		})
	},
	createPicker : function() {
		var me = this, picker = new Ext.tree.Panel({
			shrinkWrapDock : 2,
			store : me.store,
			floating : true,
			frame : true,
			rootVisible : false,
			displayField : me.displayField,
			columns : me.columns,
			scrollable : true,
			minHeight : me.minPickerHeight,
			maxHeight : me.minPickerHeight,
			expanded : false,
			manageHeight : false,
			shadow : false,
			lines : true,
			listeners : {
				scope : me,
				itemclick : me.onItemClick
			},
			viewConfig : {
				listeners : {
					scope : me,
					render : me.onViewRender
				}
			}
		}), view = picker.getView();
		if (Ext.isIE9 && Ext.isStrict) {
			view.on({
				scope : me,
				highlightitem : me.repaintPickerView,
				unhighlightitem : me.repaintPickerView,
				afteritemexpand : me.repaintPickerView,
				afteritemcollapse : me.repaintPickerView
			})
		}
		return picker
	},
	onViewRender : function(view) {
		view.getEl().on("keypress", this.onPickerKeypress, this)
	},
	repaintPickerView : function() {
		var style = this.picker.getView().getEl().dom.style;
		style.display = style.display
	},
	onItemClick : function(view, record, node, rowIndex, e) {
		this.selectItem(record)
	},
	onPickerKeypress : function(e, el) {
		var key = e.getKey();
		if (key === e.ENTER || (key === e.TAB && this.selectOnTab)) {
			this.selectItem(this.picker.getSelectionModel().getSelection()[0])
		}
	},
	selectItem : function(record) {
		var me = this;
		me.setValue(record.getId());
		me.fireEvent("select", me, record);
		me.collapse()
	},
	onExpand : function() {
		var me = this, picker = me.picker, store = picker.store, value = me.value, node;
		if (value) {
			node = store.getNodeById(value)
		}
		if (!node) {
			node = store.getRoot()
		}
		picker.selectPath(node.getPath())
	},
	setValue : function(value) {
		var me = this, record;
		me.value = value;
		if (me.store.loading) {
			return me
		}
		record = value ? me.store.getNodeById(value) : me.store.getRoot();
		if (value === undefined) {
			record = me.store.getRoot();
			me.value = record.getId()
		} else {
			record = me.store.getNodeById(value)
		}
		me.setRawValue(record ? record.get(me.displayField) : "");
		if (record != null) {
			this.getPicker().getSelectionModel().select(record)
		}
		return me
	},
	getSubmitValue : function() {
		return this.value
	},
	getValue : function() {
		return this.value
	},
	onLoad : function() {
		var value = this.value;
		if (value) {
			this.setValue(value)
		}
	},
	onUpdate : function(store, rec, type, modifiedFieldNames) {
		var display = this.displayField;
		if (type === "edit" && modifiedFieldNames && Ext.Array.contains(modifiedFieldNames, display) && this.value === rec.getId()) {
			this.setRawValue(rec.get(display))
		}
	}
});
Ext.define("Balance.web.AbstractInterceptor", {
	alternateClassName : [ "Balance.AbstractInterceptor" ],
	statics : {
		BEFORE : "before",
		ATTER : "after",
		AROUND : "around"
	},
	mode : "after",
	isInterceptor : true,
	excludes : [],
	includes : [],
	interceptor : Ext.emptyFn(),
	constructor : function(interceptorFn) {
		var me = this;
		if (Ext.isObject(interceptorFn)) {
			Ext.apply(me, interceptorFn)
		} else {
			if (Ext.isFunction(interceptorFn)) {
				me.interceptor = interceptorFn
			}
		}
	},
	getId : function() {
		return this.id
	},
	handler : function(options, response) {
		return this.interceptor(options, response)
	},
	validationUrl : function(url) {
		var me = this, intercept = false;
		if (me.includes.length == 0 && me.excludes.length == 0) {
			intercept = true
		} else {
			if (me.includes.length > 0) {
				Ext.Array.each(this.includes, function(reg) {
					var reg = new RegExp(reg);
					if (reg.test(url)) {
						intercept = true
					}
					return false
				})
			} else {
				intercept = true;
				Ext.Array.each(this.excludes, function(reg) {
					var reg = new RegExp(reg);
					if (reg.test(url)) {
						intercept = false
					}
					return false
				})
			}
		}
		return intercept
	}
});
Ext
		.define(
				"app.overrides.grid.column.Action",
				{
					override : "Ext.grid.column.Action",
					defaultRenderer : function(v, meta, record, rowIdx, colIdx, store, view) {
						var me = this, prefix = Ext.baseCSSPrefix, scope = me.origScope || me, items = me.items, len = items.length, link = me.link, text = me.text, i = 0, item, ret, disabled, tooltip, glyph, glyphParts, glyphFontFamily;
						ret = Ext.isFunction(me.origRenderer) ? me.origRenderer.apply(scope, arguments) || "" : "";
						meta.tdCls += " " + Ext.baseCSSPrefix + "action-col-cell";
						for (; i < len; i++) {
							item = items[i];
							disabled = item.disabled
									|| (item.isDisabled ? item.isDisabled.call(item.scope || scope, view, rowIdx, colIdx, item, record) : false);
							tooltip = disabled ? null : (item.tooltip || (item.getTip ? item.getTip.apply(item.scope || scope, arguments) : null));
							glyph = item.glyph;
							hidden = item.hidden || (item.isDisabled ? item.isDisabled.call(item.scope || scope, view, rowIdx, colIdx, item, record) : false);
							text = item.text;
							if (!item.hasActionConfiguration) {
								item.stopSelection = me.stopSelection;
								item.disable = Ext.Function.bind(me.disableAction, me, [ i ], 0);
								item.enable = Ext.Function.bind(me.enableAction, me, [ i ], 0);
								item.hasActionConfiguration = true
							}
							if (text) {
								if (hidden == true) {
									ret += ""
								} else {
									ret += '<span role="button" alt="'
											+ (item.altText || me.altText)
											+ '" class="'
											+ prefix
											+ "action-col-icon "
											+ prefix
											+ "action-col-"
											+ String(i)
											+ " "
											+ (disabled ? prefix + "item-disabled" : " ")
											+ " "
											+ (Ext.isFunction(item.getClass) ? item.getClass.apply(item.scope || scope, arguments) : (item.iconCls
													|| me.iconCls || ""))
											+ '"'
											+ (text ? ' data-qtip="' + text + '"' : "")
											+ ' style="margin-left:4px;padding-top:2px;height:18px;line-height:120%;min-width:30px;width:auto;font-size:12px;color:blue;" >'
											+ text + "</span>"
								}
							} else {
								if (glyph) {
									if (typeof glyph === "string") {
										glyphParts = glyph.split("@");
										glyph = glyphParts[0];
										glyphFontFamily = glyphParts[1]
									} else {
										glyphFontFamily = Ext._glyphFontFamily
									}
									if (hidden == true) {
										ret += ""
									} else {
										ret += '<span role="button" title="'
												+ (item.altText || me.altText)
												+ '" class="'
												+ prefix
												+ "action-col-icon "
												+ prefix
												+ "action-col-glyph "
												+ prefix
												+ "action-col-"
												+ String(i)
												+ " "
												+ (disabled ? prefix + "item-disabled" : " ")
												+ " "
												+ (Ext.isFunction(item.getClass) ? item.getClass.apply(item.scope || scope, arguments) : (item.iconCls
														|| me.iconCls || "")) + '"' + ' style="font-family:' + glyphFontFamily + '"'
												+ (tooltip ? ' data-qtip="' + tooltip + '"' : "") + ">&#" + glyph + ";</span>"
									}
								} else {
									ret += '<img role="button" alt="'
											+ (item.altText || me.altText)
											+ '" src="'
											+ (item.icon || Ext.BLANK_IMAGE_URL)
											+ '" class="'
											+ prefix
											+ "action-col-icon "
											+ prefix
											+ "action-col-"
											+ String(i)
											+ " "
											+ (disabled ? prefix + "item-disabled" : " ")
											+ " "
											+ (Ext.isFunction(item.getClass) ? item.getClass.apply(item.scope || scope, arguments) : (item.iconCls
													|| me.iconCls || "")) + '"' + (tooltip ? ' data-qtip="' + tooltip + '"' : "") + " />"
								}
							}
						}
						return ret
					}
				});
Ext.define("Ext.Ajax", {
	extend : "Ext.data.Connection",
	singleton : true,
	autoAbort : false,
	enableBeforeInterceptor : false,
	interceptors : Ext.create("Ext.util.MixedCollection"),
	invokeInterceptor : function(options, response, mode) {
		var me = this;
		this.interceptors.each(function(interceptor) {
			if (interceptor.mode == mode || interceptor.mode == Xzr.AbstractInterceptor.AROUND) {
				if (interceptor.handler(options, response) === false) {
					return false
				}
			}
		});
		return true
	},
	listeners : {
		beforerequest : function(conn, options, eOpts) {
			if (this.enableBeforeInterceptor) {
				return this.invokeInterceptor(options, null, "before")
			}
			return true
		},
		requestcomplete : function(conn, response, options, eOpts) {
			return this.invokeInterceptor(options, response, "after")
		}
	},
	addInterceptor : function(interceptor) {
		if (!interceptor) {
			return
		}
		if (Ext.isString(interceptor)) {
			interceptor = Ext.create(interceptor)
		}
		this.interceptors.add(interceptor.getId(), interceptor)
	}
});
